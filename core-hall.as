import flash.external.ExternalInterface;// Initial Settings * Do not Change *officeMC.stop();avatarPlaying = false;var frame:Number = 1;var inCenter:Boolean = true;popup._visible = false;// Hot Zone Distance Settingsvar stageWidth:Number = Stage.width;var eighth:Number = stageWidth/12;var fastForward:Number = stageWidth-eighth;var slowForward:Number = fastForward-eighth;var fastReverse:Number = eighth;var slowReverse:Number = fastReverse*2;var initialForward:Number = slowForward-(eighth/2);var initialReverse:Number = slowReverse+(eighth/2);// Play functions//will stop 'play', 'gotoAndPlay' and 'rewind', 'gotoAndRewind' functionsMovieClip.prototype.stopAll = function () {        delete this.onEnterFrame;        this.stop();}//will stop 'rewind', 'gotoAndRewind' functionsMovieClip.prototype.stopRewind = function () {        delete this.onEnterFrame;}//will play the timeline backwards and continal to loop until 'stopAll', 'stopRewind' or 'pause' are called//note: the 'rewind' function will cancel the 'play' function BUT the 'play' function will not cancel the 'rewind' function//you must call 'stopAll' or 'stopRewind' before using 'play' when your timeline is playing backwardsMovieClip.prototype.rewind = function () {        this.stop();        this.onEnterFrame = function () {			if(this._currentframe == 1){this.gotoAndStop(endFrame);}                if (this._currentframe > 0) {                        this.prevFrame ();                } else {                        this.gotoAndStop (this._totalframes);						                }        }}//extends the typical play allowing the play to loop at the end without a goto and stop function callMovieClip.prototype.scrollplay = function () {        this.stop();        this.onEnterFrame = function () {			if(this._currentframe == endFrame){this.gotoAndStop(beginFrame);}                if (this._currentframe < endFrame) {                        this.nextFrame ();                } else {                        this.gotoAndStop (this._totalframes);						                }        }}//will goto the specified frame and play the timeline backwards and continal to loop until 'stopAll', 'stopRewind' or 'pause' are calledMovieClip.prototype.gotoAndRewind = function (frame) {        this.gotoAndStop (frame);        this.rewind();}//will pause the timeline for the specified amount of time. will always play forwards when the pause has finishedMovieClip.prototype.pause = function (time) {        delete this.onEnterFrame;        secondsToPause = time;        pauseInt = setInterval (this, "restart", secondsToPause * 1000);}restart = function () {        clearInterval (pauseInt);        play();}////////////////////////////////////////////////////////////////////////////// CC Window Fucntions (do not change)////////////////////////////////////////////////////////////////////////////// CC window functionfunction ccCheck(){	if (ccON){		ccUp(_root.mainMC.ccWindow);	}}function ccUp(ccWindow){	trace(ccWindow);	screenWidth = System.capabilities.screenResolutionX;	screenHeight = System.capabilities.screenResolutionY;		leftPostion = (screenWidth/2)-276;	topPosition = (screenHeight/2)-200;// Select Location Specific Info 	openWindow = "assets/location/"+_root.siteLocation+"/"+ccWindow;	if (ExternalInterface.available) { ExternalInterface.call("window.open", openWindow, "win", "height=366,width=552,toolbar=no,scrollbars=no,top="+topPosition+",left=" + leftPostion); } }ccButton.onRelease = function(){ 	//ccUp(_root.mainMC.ccWindow);	if (ccON){		ccON = false;		ccButton.gotoAndPlay("off");	}else{		ccON = true;		ccButton.gotoAndPlay("on");	}	if (avatarPlaying){		ccCheck();}}////////////////////////////////////////////////////////////////////////////// Audio Button Fucntions (do not change)////////////////////////////////////////////////////////////////////////////audioON = true;function setAvatar(currentAvatar){ currentAvatarMC = eval(currentAvatar);}audioBTN.onPress = function(){if (audioON){		audioON = false;		audioBTN.gotoAndPlay("off");	}else{		audioON = true;		audioBTN.gotoAndPlay("on");	}if (avatarPlaying){	checkAudio();}	}	audioBTN.onRollOver = function(){if (audioON){		audioBTN.gotoAndStop("onover");	}else{		audioBTN.gotoAndStop("offover");	}}audioBTN.onRollOut = function(){if (audioON){		audioBTN.gotoAndStop("on");	}else{		audioBTN.gotoAndStop("off");	}}#include "mc_tween2.as"function checkAudio(setting){if (audioON){			currentAvatarMC.snd.volumeTo(100, 1, "linear");		//currentAvatarMC.snd.setVolume(100);	}else{			currentAvatarMC.snd.volumeTo(0, 1, "linear");		//currentAvatarMC.snd.setVolume(0);	}}function checkAudio2(setting){if (audioON){			currentAvatarMC.snd.setVolume(100);	}else{			currentAvatarMC.snd.setVolume(0);	}}import mx.transitions.Tween;import mx.transitions.easing.*;initialYpos = 350.55;////////////////////////////////////// PopUp Window Function////////////////////////////////////function callPopUp(popWindow){	screenWidth = System.capabilities.screenResolutionX;	screenHeight = System.capabilities.screenResolutionY;		leftPostion = (screenWidth/2)-276;	topPosition = (screenHeight/2)-200;		// Select Location Specific Info 	openWindow = "assets/location/"+_root.siteLocation+"/"+popWindow;	trace("Open Window "+openWindow);	if (ExternalInterface.available) { ExternalInterface.call("window.open", openWindow, "win", "height=366,width=552,toolbar=no,scrollbars=no,top="+topPosition+",left=" + leftPostion); } }function callPDF(popWindow){		// Select Location Specific Info	openWindow = "assets/location/"+_root.siteLocation+"/"+popWindow;	getURL(openWindow, "_blank");}////////////////////////////////////// Detect keypress////////////////////////////////////var keyListener:Object = new Object();keyListener.onKeyDown = function() {    if (Key.isDown(Key.DOWN)) {		if(!officeMC.frameStopLeft){		officeMC.rewind();		}    } else if (Key.isDown(Key.UP)) {		if(!officeMC.frameStopRight){       officeMC.scrollplay();		}    }};////////////////////////////////////// Detect keyrelease////////////////////////////////////keyListener.onKeyUp = function() {	officeMC.stopAll();};	Key.addListener(keyListener);////////////////////////////////////// Detect mouse position////////////////////////////////////mouseListener = new Object();mouseListener.onMouseMove = function () {    stagexSpot=_xmouse;	stageySpot=_ymouse;	popup.prompt.text = "";	popup._visible = false;    moveFunction();}Mouse.addListener(mouseListener);function moveFunction(){	////////////////////////////////////	// Return to Center functionality////////////////////////////////////	if(stageySpot>435 and stageySpot<525 and !popUpUp and !officeMC.frameStopLeft and !helperOver){		officeMC.rewind();/*		var vertTween:Tween = new Tween (officeMC,"_y",Strong.easeOut,initialYpos,initialYpos+56,3,true);		inCenter = false;		vertTween.onMotionFinished = function (){		this.stop()		}*/	}		if(stageySpot<170 and stageySpot>75 and !popUpUp and !officeMC.frameStopRight and !helperOver){		officeMC.scrollplay();/*		var vertTween:Tween = new Tween (officeMC,"_y",Strong.easeOut,initialYpos,initialYpos-56,3,true);		inCenter = false;		vertTween.onMotionFinished = function (){		this.stop()		}*/	}				if(stageySpot<75 or stageySpot>525 and !popUp){				officeMC.stopAll();	}		if(stageySpot>170 and stageySpot<435 and !popUp){				officeMC.stopAll();		/*	var vertTween:Tween = new Tween (officeMC,"_y",Strong.easeOut,officeMC._y,initialYpos,3,true);		inCenter = true;		vertTween.onMotionFinished = function (){		this.stop()		}*/	}	if(popUp){		officeMC.stopAll();}	previousXspot = stagexSpot;	previousYspot = stageySpot;}